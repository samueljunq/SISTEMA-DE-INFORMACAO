# include  < stdio.h >
# inclui  < string.h >
# include  < stdlib.h >

typedef  struct {
	char nomePessoa[ 30 ], data[ 11 ], emprestado;
	
}emprestimos;

typedef  struct {
	char título[ 30 ], console[ 15 ];
	int ano, classificação;
	emprestimos emprestimo[ 100 ];
}jogos;

int qtd = 0 ;

void  addJogo (jogos j[]){
	
	printf ( " Título: " );
	fflush (stdin);
	obtém (j[qtd]. título );
	
	printf ( " Console: " );
	fflush (stdin);
	obtém (j[qtd]. console );
	
	printf ( " Ano: " );
	scanf ( " %d " , &j[qtd].ano ) ;
	
	printf ( " Classificação: " );
	scanf ( " %d " , &j[qtd]. classificação );
	
	j[qtd]. emprestimo -> emprestado = ' N ' ;
	
	printf ( " \n Jogo cadastrado com sucesso! :) " );
	
	qtd++;
}

void  listaJogos (jogos j[]){
	int i, jj = - 1 ;
	
	for (i = 0 ; i < qtd; i++){
		printf ( " \n -- Jogo %2d -- \n " , i+ 1 );
		printf ( " Titulo: %s \n " ,j[i]. titulo );
		printf ( " Console: %s \n " , j[i]. console );
		printf ( " Ano: %d \n " ,j[i] .ano );
		printf ( " Classificação: %d \n " , j[i]. classificação );
		
		if (j[i]. emprestimo -> emprestado == ' S ' )
			printf ( " Emprestado: Sim \n " );
		senão
			printf ( " Emprestado: Nao \n " );
		
		jj = 1 ;
	}
	
	se (jj == - 1 )
		printf ( " \n Nenhum Jogo cadastrado! " );

}

void  buscaJogo (jogos j[]){
	int i, jj = - 1 ;
	char busca[ 50 ], aux[ 50 ];
	
		printf ( " Informe o nome: " );
		fflush (stdin);
		pega (busca);
		strlwr (busca);
		
		for (i = 0 ; i < qtd; i++){
			strcpy (aux, j[i]. título );
			strlwr (aux);
			
			if ( strcmp (aux, busca) == 0 ){
				printf ( " \n -- Jogo %2d -- \n " , i+ 1 );
				printf ( " Titulo: %s \n " ,j[i]. titulo );
				printf ( " Console: %s \n " , j[i]. console );
				printf ( " Ano: %d \n " ,j[i] .ano );
				printf ( " Classificação: %d \n " , j[i]. classificação );
				
				if (j[i]. emprestimo -> emprestado == ' S ' )
					printf ( " Emprestado: Sim \n " );
				senão
					printf ( " Emprestado: Nao \n " );
					
				jj = 1 ;
				quebrar ;
			}
		}

	
	se (jj == - 1 )
		printf ( " Jogo Não Encontrado! " );

}

void  filtroConsole (jogos j[]){
int i, jj = - 1 ;
	char busca[ 30 ], aux[ 30 ];
	
		printf ( " Informe o console: " );
		fflush (stdin);
		pega (busca);
		strlwr (busca);
		
		for (i = 0 ; i < qtd; i++){
			strcpy (aux, j[i]. console );
			strlwr (aux);
			
			if ( strcmp (aux, busca) == 0 ){
				printf ( " \n -- Jogo %2d -- \n " , i+ 1 );
				printf ( " Titulo: %s \n " ,j[i]. titulo );
				printf ( " Console: %s \n " , j[i]. console );
				printf ( " Ano: %d \n " ,j[i] .ano );
				printf ( " Classificação: %d \n " , j[i]. classificação );
				
				if (j[i]. emprestimo -> emprestado == ' S ' )
					printf ( " Emprestado: Sim \n " );
				senão
					printf ( " Emprestado: Nao \n " );
					
				jj = 1 ;
			}
		}
					
	se (jj == - 1 )
		printf ( " \n Nenhum Jogo cadastrado do console %s ! " , busca);
}

void  emprestimosJogo (jogos j[], int op){
	int i, jj = - 1 , op2;
	char busca[ 30 ], aux[ 30 ];
	
	if (op == 1 ){
		printf ( " \n Informe qual jogo deseja pegar emprestado: " );
		fflush (stdin);
		pega (busca);
		strlwr (busca);
		
		for (i = 0 ; i < qtd; i++){
			strcpy (aux, j[i]. título );
			strlwr (aux);
			
			if ( strcmp (aux, busca) == 0 ){
				printf ( " \n -- Jogo %2d -- \n " , i+ 1 );
				printf ( " Titulo: %s \n " ,j[i]. titulo );
				printf ( " Console: %s \n " , j[i]. console );
				printf ( " Ano: %d \n " ,j[i] .ano );
				printf ( " Classificação: %d \n " , j[i]. classificação );
				
				jj = 1 ;
				
				if (j[i]. emprestimo -> emprestado == ' S ' )
					printf ( " Emprestado: Sim \n " );
				senão
					printf ( " Emprestado: Nao \n " );
					
				if (j[i]. emprestimo -> emprestado == ' S ' )
					printf ( " Este jogo ja esta sendo emprestado! " );
					
				outra coisa {
					printf ( " -- Preencher Dados Emprestimo -- \n " );
					printf ( " Nome: " );
					fflush (stdin);
					gets (j[i]. emprestimo -> nomePessoa );
					
					printf ( " Dados(DD/MM/AAAA): " );
					fflush (stdin);
					get (j[i]. emprestimo -> data );
					
					j[eu]. emprestimo -> emprestado = ' S ' ;
					
					printf ( " Jogo emprestado com sucesso! :) \n " );
					
					quebrar ;
				}
			}
			
		}
		
		se (jj == - 1 )
			printf ( " Jogo Não Encontrado! " );
		
	} senão  se (op == 2 ){
		printf ( " \n Informe qual jogo deseja devolver: " );
		fflush (stdin);
		pega (busca);
		strlwr (busca);
		
		for (i = 0 ; i < qtd; i++){
			strcpy (aux, j[i]. título );
			strlwr (aux);
			
			if ( strcmp (aux, busca) == 0 ){
				printf ( " \n -- Jogo %2d -- \n " , i+ 1 );
				printf ( " Titulo: %s \n " ,j[i]. titulo );
				printf ( " Console: %s \n " , j[i]. console );
				printf ( " Ano: %d \n " ,j[i] .ano );
				printf ( " Classificação: %d \n " , j[i]. classificação );
				
				jj = 1 ;
				
				if (j[i]. emprestimo -> emprestado == ' S ' )
					printf ( " Emprestado: Sim \n " );
				senão
					printf ( " Emprestado: Nao \n " );
					
				if (j[i]. emprestimo -> emprestado == ' N ' )
					printf ( " Este Jogo não está sendo emprestado! " );	
				outra coisa {
					printf ( " \ nDados do emprestimo: \n " );
					printf ( " Nome: %s \n " , j[i]. emprestimo -> nomePessoa );
					printf ( " Dados(DD/MM/AAAA): %s \n " , j[i]. emprestimo -> dados );

					printf ( " Deseja realmente devolver?(1- Sim | 2- Nao): " );
					scanf ( " %d " , &op2);
					
					se (op2 == 2 )
						printf ( " Jogo não foi devolvido! \n " );
					senão  se (op2 == 1 ){	
						j[eu]. emprestimo -> emprestado = ' N ' ;
						printf ( " Jogo devolvido com sucesso! :) \n " );
						
					} senão
						printf ( " Opção Inválida! \n " );
				}
			}
		}
	} senão  se (op == 3 ){
		for (i = 0 ; i < qtd; i++){
			if (j[i]. emprestimo -> emprestado == ' S ' ){
				printf ( " \n -- Jogo %2d -- \n " , i+ 1 );
				printf ( " Titulo: %s \n " ,j[i]. titulo );
				printf ( " Console: %s \n " , j[i]. console );
				printf ( " Ano: %d \n " ,j[i] .ano );
				printf ( " Classificação: %d \n " , j[i]. classificação );
				printf ( " \ nDados do emprestimo: \n " );
				printf ( " Nome: %s \n " , j[i]. emprestimo -> nomePessoa );
				printf ( " Dados(DD/MM/AAAA): %s \n " , j[i]. emprestimo -> dados );
				jj = 1 ;
			}
		}
		
		se (jj == - 1 )
			printf ( " Nenhum jogo sendo emprestado! :( \n " );

	} senão
		printf ( " Opção Inválida! \n " );
}

 menu int (){
	operação int ;
	
	printf ( " *** Catálogo de Jogos *** \n\n " );
	printf ( " 1- Cadastrar \n " );
	printf ( " 2- Listar Jogos \n " );
	printf ( " 3- Buscar Jogo \n " );
	printf ( " 4- Console do Filtro \n " );
	printf ( " 5- Emprestimos \n " );
	printf ( " 0- Sair \n " );
	printf ( " Digite uma opção: " );
	scanf ( " %d " , &op);
	printf ( " \n " );
	
	operação de retorno ;
}

void  salvaArq (jogos j[]){
	ARQUIVO *arq;
	int i = 0 ;
	arq = fopen ( " dadosJogos.txt " , " wb " );
	fwrite (&j[i], sizeof (j), qtd, arq);
	printf ( " Dados salvos com sucesso \n " );
	fclose (arq);
}
	
void  carregaArq (jogos j[]){
	ARQUIVO *arq;
	arq = fopen ( " dadosJogos.txt " , " rb " );
	if (arq == NULL ){
		printf ( " Arquivo não encontrado :( \n " );
		retorno ;
	}
	while ( fread (&j[qtd], sizeof (jogos), 1 , arq) > 0 )
		qtd++;
		
	printf ( " Dados médicos com sucesso! \n " );
	fclose (arq);
}

int  principal (){
	
	int i, op, op2;
	char aux[ 30 ];

	
	jogos jogo[ 100 ];
	
	printf ( " Deseja carregar dados de um arquivo?(1- Sim | 2- Nao): " );
	scanf ( " %d " , &op);
	se (op == 1 )
		carregaArq (jogo);
	senão  se (op != 2 )
		printf ( " \n Opção Inválida, reinicie o app! " );
		
	pegue ();
	sistema ( " cls " );
	
	fazer {
		op = menu ();
		interruptor (op){
			caso  1 :
				printf ( " Cadastro: \n " );
				addJogo (jogo);
				quebrar ;
				
			caso  2 :
				printf ( " Lista de Jogos: \n " );
				listaJogos (jogo);
				quebrar ;
				
			caso  3 :
				printf ( " Buscar Jogo: \n " );
				buscaJogo (jogo);
				quebrar ;
			
			caso  4 :
				printf ( " Filtro Console: \n " );
				filtroConsole (jogo);
				quebrar ;	
				
			caso  5 :
				printf ( " Emprestimos: \n " );
				printf ( " 1- Fazer um emprestimo \n " );
				printf ( " 2- Devolver um jogo \n " );
				printf ( " 3- Listar jogos emprestados \n " );
				printf ( " Digite uma opção: " );
				scanf ( " %d " , &op2);
				emprestimosJogo (jogo, op2);
				quebrar ;
							
			caso  0 :
				printf ( " Saindo... \n " );
				salvaArq (jogo);
				quebrar ;
				
			padrão :
				printf ( " \n Opção inválida! " );
				quebrar ;		
		}
		pegue ();
		sistema ( " cls " );
	} while (op != 0 );
	
	retorna  0 ;
}
