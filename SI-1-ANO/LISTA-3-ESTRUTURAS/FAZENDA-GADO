# include  < stdio.h >
# inclui  < string.h >
# include  < stdlib.h >

typedef  struct {
	int mes, ano;
	
}nascs;

typedef  struct {
	bacalhau int ;
	float leite, alim;
	char abate;
	nascs nasc[ 100 ];
}gados;

int qtd = 0 ;

void  addGado (gados g[]){
	auxiliar int ;
	
	printf ( " Código: " );
	scanf ( " %d " , &g[qtd]. cod );
	
	printf ( " Produção de Leite por semana: " );
	scanf ( " %f " , &g[qtd]. leite );
	
	printf ( " Alimento por semana(kg): " );
	scanf ( " %f " , &g[qtd]. alim );
	
	printf ( " Dados de Nascimento(Mes): " );
	scanf ( " %d " , &g[qtd]. nasc -> mes );
	
	printf ( " Ano: " );
	scanf ( " %d " , &g[qtd]. nasc -> ano );
	
	aux = g[qtd]. nasc -> ano ;
	
	if ( 2022 -aux > 5 || g[qtd]. leite < 40 )
		g[qtd]. abate = ' S ' ;
	senão
		g[qtd]. abate = ' N ' ;
	
	printf ( " \n Gado cadastrado com sucesso! :) " );
	
	qtd++;
}

void  listaGados (gados g[]){
	int i, jj = - 1 ;
	
	for (i = 0 ; i < qtd; i++){
		printf ( " \n -- Gado %2d -- \n " , i+ 1 );
		printf ( " Código: %d \n " , g[i]. cod );
		printf ( " Leite por semana: %.1f L \n " , g[i]. leite );
		printf ( " Alimento por semana: %.1f kg \n " ,g[i] .alim );
		printf ( " Dados de Nascimento: %d / %d \n " , g[i]. nasc -> mes , g[i]. nasc -> ano );
		
		if (g[i]. abater == ' S ' )
			printf ( " Abate: Sim \n " );
		senão
			printf ( " Abate: Nao \n " );
			
		jj = 1 ;
	}
	
	se (jj == - 1 )
		printf ( " \n Nenhum Gado cadastrado! " );

}

void  listaAbate (gados g[]){
	int i, jj = - 1 ;
	
	for (i = 0 ; i < qtd; i++){
		if (g[i]. abate == ' S ' ){
			printf ( " \n -- Gado %2d -- \n " , i+ 1 );
			printf ( " Código: %d \n " , g[i]. cod );
			printf ( " Leite por semana: %.1f L \n " , g[i]. leite );
			printf ( " Alimento por semana: %.1f kg \n " ,g[i] .alim );
			printf ( " Dados de Nascimento: %d / %d \n " , g[i]. nasc -> mes , g[i]. nasc -> ano );
			
			if (g[i]. abater == ' S ' )
				printf ( " Abate: Sim \n " );
			senão
				printf ( " Abate: Nao \n " );
	
			jj = 1 ;
		}
	}
	
	se (jj == - 1 )
		printf ( " \n Nenhum Gado na lista para Abate! " );
}

float  qtdAlimento (gados g[]){
	int eu;
	float soma = 0,0 ;
	
	para (i = 0 ; i < qtd; i++)
		soma += g[i]. alim ;
		
	retornar soma;
}

float  qtdLeite (gados g[]){
	int eu;
	float soma = 0,0 ;
	
	para (i = 0 ; i < qtd; i++)
		soma += g[i]. leite ;
		
	retornar soma;
}

 menu int (){
	operação int ;
	
	printf ( " ***Gados*** \n\n " );
	printf ( " 1- Cadastrar \n " );
	printf ( " 2- Listar Gados \n " );
	printf ( " 3- Listar Gados para o abater \n " );
	printf ( " 4- Quantidade de Leite \n " );
	printf ( " 5- Quantidade de Alimento \n " );
	printf ( " 0- Sair \n " );
	printf ( " Digite uma opção: " );
	scanf ( " %d " , &op);
	printf ( " \n " );
	
	operação de retorno ;
}

void  salvaArq (gados g[]){
	ARQUIVO *arq;
	int i = 0 ;
	arq = fopen ( " dadosGados.txt " , " wb " );
	fwrite (&g[i], sizeof (g), qtd, arq);
	printf ( " Dados salvos com sucesso \n " );
	fclose (arq);
}
	
void  carregaArq (gados g[]){
	ARQUIVO *arq;
	arq = fopen ( " dadosGados.txt " , " rb " );
	if (arq == NULL ){
		printf ( " Arquivo não encontrado :( \n " );
		retorno ;
	}
	while ( fread (&g[qtd], sizeof (gados), 1 , arq) > 0 )
		qtd++;
		
	printf ( " Dados médicos com sucesso! \n " );
	fclose (arq);
}

int  principal (){
	
	int i, op;

	
	gados gado[ 100 ];
	
	printf ( " Deseja carregar dados de um arquivo?(1- Sim | 2- Nao): " );
	scanf ( " %d " , &op);
	se (op == 1 )
		carregaArq (gado);
	senão  se (op != 2 )
		printf ( " \n Opção Inválida, reinicie o app! " );
		
	pegue ();
	sistema ( " cls " );
	
	fazer {
		op = menu ();
		interruptor (op){
			caso  1 :
				printf ( " Cadastro: \n " );
				addGado (gado);
				quebrar ;
				
			caso  2 :
				printf ( " Lista de Gados: \n " );
				listaGados (gado);
				quebrar ;
				
			caso  3 :
				printf ( " Gados que irao pro abater: \n " );
				listaAbate (gado);
				quebrar ;
				
			caso  4 :
				printf ( " Produção de Leite por semana: %.1f L \n " , qtdLeite (gado));
				quebrar ;
			
			caso  5 :
				printf ( " Quantidade de Alimento por semana: %.1f kg \n " , qtdAlimento (gado));
				quebrar ;	
							
			caso  0 :
				printf ( " Saindo... \n " );
				salvaArq (gado);
				quebrar ;
				
			padrão :
				printf ( " \n Opção inválida! " );
				quebrar ;		
		}
		pegue ();
		sistema ( " cls " );
	} while (op != 0 );
	
	retorna  0 ;
}
