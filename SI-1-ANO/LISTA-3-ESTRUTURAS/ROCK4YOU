# include  < stdio.h >
# include  < stdlib.h >
# inclui  < string.h >

typedef  struct {
	char nome[ 40 ], genero[ 40 ];
	int integrantes, classificação;
}tbanda;

int qtd = 0 ;

 menu int (){
	operação int ;

	printf ( " *** Sistema de Cadastro Rock4You *** \n " );
	printf ( " 1- Cadastrar \n " );
	printf ( " 2- Listar \n " );
	printf ( " 3- Ranking de Filtros \n " );
	printf ( " 4-Filtro Genero \n " );
	printf ( " 5- Buscar Banda \n " );
	printf ( " 6- Excluir \n " );
	printf ( " 7-Alterar \n " );
	printf ( " 0- Sair \n " );
	scanf ( " %d " , &op);
	
	operação de retorno ;
}

void  addbanda (tbanda b[]){
	printf ( " Nome da banda: " );
	fflush (stdin);
	obtém (b[qtd]. nome );
	
	printf ( " Gerador da banda: " );
	fflush (stdin);
	obtém (b[qtd]. genero );
	
	printf ( " Qtde de integrantes: " );
	scanf ( " %d " , &b[qtd]. integrantes );
	
	printf ( " Ranking da banda: " );
	scanf ( " %d " , &b[qtd]. classificação );
	qtd++;
}

void excluir (  tbanda b[], char busca[]){
	int i, j = - 1 , op1;
	char exclui[ 50 ];
	strlwr (busca);
	for (i = 0 ; i < qtd; i++){
		strcpy (exclui, b[i]. nome );
		strlwr (exclui);
		if ( strcmp (busca, exclui) == 0 ) {
			printf ( " **Banda %d : ** \n  " ,i+ 1 );
			printf ( " Nome: %s \n " , b[i]. nome );
			printf ( " Generoso: %s \n " ,b[i] .genero );
			printf ( " Integrantes: %d \n " , b[i]. integrantes );
			printf ( " Classificação: %d \n " , b[i]. classificação );
			printf ( " \n Tem certeza que deseja remover a banda? (1 - Sim | 2 - Nao ): " );
			scanf ( " %d " , &op1);
			j = eu;
			quebrar ;
		}
	}
	if ( j != - 1 && op1 == 1 ){
		b[j] = b[qtd- 1 ];
		qtd--;
		printf ( " Banda Deletada com Sucesso! \n " );
	} senão  se ( j != - 1 && op1 != 1 )
		printf ( " Banda Nao foi Deletada! \n " );
	senão
		printf ( " Banda Não estava disponível! \n " );
}

void  alterabanda (tbanda b[], char busca[]){
	int eu;
	char altera[ 50 ];
	strlwr (busca);
	for (i = 0 ; i < qtd; i++){
		strcpy (altera, b[i]. nome );
		strlwr (altera);
		if ( strcmp (busca, altera) == 0 ) {
			printf ( " **Banda %d : ** \n  " ,i+ 1 );
			printf ( " Nome: %s \n " , b[i]. nome );
			printf ( " Generoso: %s \n " ,b[i] .genero );
			printf ( " Integrantes: %d \n " , b[i]. integrantes );
			printf ( " Classificação: %d \n " , b[i]. classificação );
			
			printf ( " \n ** Nova Banda %d : ** \n " , i+ 1 );
			printf ( " Nome: " );
			fflush (stdin);
			obtém (b[i]. nome );
			printf ( " Generoso: " );
			fflush (stdin);
			obtém (b[i]. genero );
			printf ( " Integrantes: " );
			scanf ( " %d " , &b[i]. integrantes );
			printf ( " Classificação: " );
			scanf ( " %d " , &b[i]. classificação );
			printf ( " \ nBanda Alterada com Sucesso! \n " );
			quebrar ;
		}
	}
}

void  buscabanda (tbanda b[], char busca[]){
	int i, cnt = 0 ;
	char buscaux[ 50 ];
	busca = strlwr (busca);
	for (i = 0 ; i < qtd; i++){
		strcpy (buscaux, b[i]. nome );
		strlwr (buscaux);
		if ( strcmp (busca, buscaux) == 0 ) {
		cnt = 1 ;
		printf ( " **Banda %d : ** \n  " ,i+ 1 );
		printf ( " Nome: %s \n " , b[i]. nome );
		printf ( " Generoso: %s \n " ,b[i] .genero );
		printf ( " Integrantes: %d \n " , b[i]. integrantes );
		printf ( " Classificação: %d \n " , b[i]. classificação );
		printf ( " ------------------------- \n " );
		}
	}
	se (cnt == 0 )
		printf ( " Banda Não estava disponível! \n " );
	
}

void  listabandas (tbanda b[]){
	int eu;
	for (i = 0 ; i < qtd; i++){
		printf ( " **Banda %d : ** \n  " ,i+ 1 );
		printf ( " Nome: %s \n " , b[i]. nome );
		printf ( " Generoso: %s \n " ,b[i] .genero );
		printf ( " Integrantes: %d \n " , b[i]. integrantes );
		printf ( " Classificação: %d \n " , b[i]. classificação );
		printf ( " ------------------------- \n " );
	}
}

void  salvaArq (tbanda bandas[]){
	ARQUIVO *arq;
	int i = 0 ;
	arq = fopen ( " dadosBandas.txt " , " wb " );
	fwrite (&bandas[i], sizeof (bandas), qtd, arq);
	printf ( " Dados salvos com sucesso \n " );
	fclose (arq);
}

void  carregaArq (tbanda bandas[]){
	ARQUIVO *arq;
	arq = fopen ( " dadosBandas.txt " , " rb " );
	if (arq == NULL ){
		printf ( " Arquivo não encontrado :( \n " );
		retorno ;
	}
	while ( fread (&bandas[qtd], sizeof (tbanda), 1 , arq) > 0 )
		qtd++;
		
	printf ( " Dados médicos com sucesso! \n " );
	fclose (arq);
}

void  listaRanking (tbanda b[], int busca){
	int eu;
	for (i = 0 ; i< qtd; i++){
		if (busca == b[i]. classificação ){
		printf ( " **Banda %d : ** \n  " ,i+ 1 );
		printf ( " Nome: %s \n " , b[i]. nome );
		printf ( " Generoso: %s \n " ,b[i] .genero );
		printf ( " Integrantes: %d \n " , b[i]. integrantes );
		printf ( " Classificação: %d \n " , b[i]. classificação );
		printf ( " ------------------------- \n " );
		}
	}
}

void  listaGenero (tbanda b[], char gen[]){
	int eu;
	char genteste[ 20 ];
	gen = strlwr (gen);
	for (i = 0 ; i< qtd; i++){
		strcpy (genteste, b[i]. genero );
		strlwr (pessoas);
		if ( strcmp (gen, genteste)== 0 ) {
		printf ( " **Banda %d : ** \n  " ,i+ 1 );
		printf ( " Nome: %s \n " , b[i]. nome );
		printf ( " Generoso: %s \n " ,b[i] .genero );
		printf ( " Integrantes: %d \n " , b[i]. integrantes );
		printf ( " Classificação: %d \n " , b[i]. classificação );
		printf ( " ------------------------- \n " );
		}
	}
}

int  principal (){
	tbanda bandas[ 100 ];
	carregaArq (bandas);
	
	int op, busca;
	char gen[ 20 ], buscastr[ 50 ];
	
	fazer {
		op = menu ();
		interruptor (op){
			caso  1 :
				printf ( " Cadastrar \n " );
				addbanda (bandas);
				quebrar ;
			caso  2 :
				printf ( " Lista \n " );
				listabandas (bandas);
				quebrar ;
			caso  3 :
				printf ( " Classificação do Filtro: " );
				scanf ( " %d " , &busca);
				listaRanking (bandas, busca);
				quebrar ;
			caso  4 :
				printf ( " Filtro Genero: " );
				fflush (stdin);
				obtém (gen);
				listaGenero (bandas, gen);
				quebrar ;
			caso  5 :
				printf ( " Buscar Banda: " );
				fflush (stdin);
				obtém (buscastr);
				buscabanda (bandas, buscastr);
				quebrar ;
			caso  6 :
				printf ( " Excluir: " );
				fflush (stdin);
				obtém (buscastr);
				excluir (bandas, buscastr );
				quebrar ;
			caso  7 :
				printf ( " Alterar: " );
				fflush (stdin);
				obtém (buscastr);
				alterabanda (bandas, buscastr);
				quebrar ;
			caso  0 :
				printf ( " Saindo... \n " );
				salvaArq (bandas);
				quebrar ;
			padrão :
				printf ( " \ nOpção Inválida! " );
				quebrar ;
		}
		pegue ();
		sistema ( " cls " );
	} while (op != 0 );
	retorna  0 ;
}
